(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{400:function(t,e,a){t.exports=a.p+"assets/img/pywebview3.5e63e895.png"},408:function(t,e,a){"use strict";a.r(e);var s=a(58),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("img",{staticStyle:{"max-width":"300px",margin:"50px auto",display:"block"},attrs:{src:a(400),alt:"pywebview 3.0"}}),t._v(" "),s("h1",{attrs:{id:"introducing-pywebview-3-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introducing-pywebview-3-0"}},[t._v("#")]),t._v(" Introducing pywebview 3.0")]),t._v(" "),s("p",[t._v("I am happy to announce the release of "),s("em",[t._v("pywebview 3.0")]),t._v(". "),s("em",[t._v("pywebview")]),t._v(" lets you to build GUI for your Python program using HTML, CSS and Javascript, while doing its best  hiding the fact that the GUI is built using a browser. Think of "),s("em",[t._v("pywebview")]),t._v(" as lightweight Electron for Python. Unlike Electron, "),s("em",[t._v("pywebview")]),t._v(" does not bundle a web renderer, but instead relies on a rendered provided by operating system. "),s("em",[t._v("Sidenote: bundling a renderer is still an option though, as in case of CEF")]),t._v(".")]),t._v(" "),s("p",[t._v("If you are new here, head over to "),s("RouterLink",{attrs:{to:"/guide/usage.html"}},[t._v("usage guide")]),t._v(", "),s("RouterLink",{attrs:{to:"/guide/api.html"}},[t._v("API reference")]),t._v(", "),s("a",{attrs:{href:"/examples"}},[t._v("examples")]),t._v(" and our very own "),s("a",{attrs:{href:"https://github.com/r0x0r/pywebview/tree/master/examples/todos",target:"_blank",rel:"noopener noreferrer"}},[t._v("TODOs app"),s("OutboundLink")],1),t._v(".")],1),t._v(" "),s("p",[t._v("Oh and "),s("em",[t._v("pywebview")]),t._v(" can be installed with")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pywebview\n")])])]),s("h2",{attrs:{id:"what-s-new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-s-new"}},[t._v("#")]),t._v(" What's new?")]),t._v(" "),s("p",[t._v("Version 3.0 is the first version that is not compatible with previous versions. Multi-window support introduced in 2.x resulted in some questionable architectural decisions, which now have been resolved and hopefully make more sense. Notable changes include:")]),t._v(" "),s("h3",{attrs:{id:"webview-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webview-start"}},[t._v("#")]),t._v(" webview.start()")]),t._v(" "),s("p",[t._v("The biggest change is introduction of window objects and "),s("code",[t._v("webview.start()")]),t._v(" function that starts a GUI loop. Previously GUI loop was started by the first call of "),s("code",[t._v("webview.create_window()")]),t._v(". Hence "),s("code",[t._v("create_window")]),t._v(" had in fact two functions: creating a window and starting a GUI loop. To make things more confusing the first call to "),s("code",[t._v("create_window")]),t._v(" was blocking, while subsequent calls from subthreads were not. To make things more straightforward, "),s("code",[t._v("create_window")]),t._v(" now creates a window and returns a window object, no matter how many times you call it. The function is always non-blocking too. Bear in mind that until GUI loop is started, no windows are displayed. Using new API, hello world in "),s("em",[t._v("pywebview")]),t._v(" looks like this:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" webview\n\nwindow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello world'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://pywebview.flowrl.com/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwebview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("code",[t._v("webview.start")]),t._v(" also provides a convenient way to execute thread specific code after GUI loop is started, so no more threading boilerplate.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" webview\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("change_title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("change_title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pywebview whoa'")]),t._v(""),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwindow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pywebview wow'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://pywebview.flowrl.com/hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwebview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("change_title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"window-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window-object"}},[t._v("#")]),t._v(" Window object")]),t._v(" "),s("p",[t._v("All the functions related to window management and web content have been moved to a window object as returned by "),s("code",[t._v("webview.create_window")]),t._v(". For example "),s("code",[t._v("webview.load_html")]),t._v(" became "),s("code",[t._v("window.load_html")]),t._v(" as in:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" webview\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("load_html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("load_html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<html><body><h1>pywebview wow!</h1><body></html>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwindow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pywebview wow'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwebview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("load_html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"built-in-http-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#built-in-http-server"}},[t._v("#")]),t._v(" Built-in HTTP server")]),t._v(" "),s("p",[s("em",[t._v("pywebview")]),t._v(" now provides its own HTTP server for serving static local files. For obfuscation purposes server is started on a random port.")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" webview\n\nwindow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pywebview wow'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assets/index.html'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwebview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("http_server"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#events"}},[t._v("#")]),t._v(" Events")]),t._v(" "),s("p",[t._v("3.0 introduces a new event system that lets to subscribe/unsubscribe to events. Currently "),s("code",[t._v("shown")]),t._v(" and "),s("code",[t._v("loaded")]),t._v(" events are implemented. Event objects are provided by a window object. See "),s("RouterLink",{attrs:{to:"/examples/events.html"}},[t._v("events example")]),t._v(" for usage details.")],1),t._v(" "),s("h3",{attrs:{id:"edge-support"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#edge-support"}},[t._v("#")]),t._v(" Edge support")]),t._v(" "),s("p",[t._v("Windows now provides support for EdgeHTML. EdgeHTML is automatically chosen if your system requirements are met (.NET 4.6.2 and Windows 10 1803). Unfortunately accessing local files is not currently possible with EdgeHTML, so you must use a HTTP server. If you wish for some reason to force MSHTML, you can "),s("code",[t._v("webview.start(gui='mshtml')")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"create-window-now-can-load-html-directly"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-window-now-can-load-html-directly"}},[t._v("#")]),t._v(" create_window now can load html directly")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" webview\n\nwindow "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" webview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create_window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pywebview wow'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<html><body><h1>pywebview wow!</h1><body></html>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nwebview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("If both url and html parameters are provided, html takes precedence.")]),t._v(" "),s("h3",{attrs:{id:"get-elements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-elements"}},[t._v("#")]),t._v(" get_elements")]),t._v(" "),s("p",[t._v("You can now retrieve DOM nodes by using "),s("code",[t._v("window.get_elements(selector)")]),t._v(" function. Nodes are serialized using "),s("a",{attrs:{href:"https://github.com/azaslavsky/domJSON",target:"_blank",rel:"noopener noreferrer"}},[t._v("domJSON"),s("OutboundLink")],1),t._v(" library.")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/examples/get_elements.html"}},[t._v("Example")])],1),t._v(" "),s("h3",{attrs:{id:"config-is-gone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#config-is-gone"}},[t._v("#")]),t._v(" Config is gone")]),t._v(" "),s("p",[s("code",[t._v("webview.config")]),t._v(" is no more. To set a GUI renderer, use the "),s("code",[t._v("gui")]),t._v(" parameter to "),s("code",[t._v("webview.start")])]),t._v(" "),s("h3",{attrs:{id:"confirm-quit-is-now-confirm-close"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#confirm-quit-is-now-confirm-close"}},[t._v("#")]),t._v(" confirm_quit is now confirm_close")]),t._v(" "),s("p",[t._v("E.g. "),s("code",[t._v("webview.create_window('Window', confirm_close=True)")])]),t._v(" "),s("h1",{attrs:{id:"support-the-project"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#support-the-project"}},[t._v("#")]),t._v(" Support the project")]),t._v(" "),s("p",[s("em",[t._v("pywebview")]),t._v(" is a small project with limited resources, any help is welcome. PRs, documentation, research, anything goes. Having said that commits are preferred over comments. Check out the "),s("a",{attrs:{href:"/contributing"}},[t._v("contributing guide")]),t._v(" to get started.")]),t._v(" "),s("p",[t._v("If you find "),s("em",[t._v("pywebview")]),t._v(" useful, please support it. We offer donations via Patreon and Open Collective, as well as one-time Paypal donations. If you represent a company, consider becoming a sponsor to get exposure for your company and connect with Python developers.")]),t._v(" "),s("div",{staticClass:"center spc-l spc-vertical"},[s("a",{attrs:{href:"https://www.patreon.com/bePatron?u=13226105","data-patreon-widget-type":"become-patron-button"}},[s("img",{attrs:{src:"https://c5.patreon.com/external/logo/become_a_patron_button.png",alt:"Become a Patron!"}})])]),t._v(" "),s("div",{staticClass:"center spc-l spc-vertical"},[s("a",{attrs:{href:"https://opencollective.com/pywebview/donate",target:"_blank"}},[s("img",{attrs:{src:"https://opencollective.com/pywebview/donate/button@2x.png?color=blue",width:"300"}})])]),t._v(" "),s("div",{staticClass:"center spc-l spc-vertical"},[s("a",{attrs:{href:"http://bit.ly/2eg2Z5P",target:"_blank"}},[s("img",{attrs:{src:"/paypal.png"}})])])])}),[],!1,null,null,null);e.default=n.exports}}]);
